<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Theme Generator MVP 2.0 - Preview Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #f5f5f5;
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 400px;
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            overflow-y: auto;
            padding: 20px;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        }

        .sidebar h1 {
            font-size: 24px;
            margin-bottom: 10px;
            color: #ecf0f1;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }

        .version {
            font-size: 12px;
            color: #bdc3c7;
            margin-bottom: 30px;
        }

        .theme-section {
            margin-bottom: 30px;
            background-color: rgba(52, 73, 94, 0.8);
            border-radius: 12px;
            padding: 20px;
            backdrop-filter: blur(10px);
        }

        .theme-section-title {
            font-size: 18px;
            font-weight: 600;
            color: #ecf0f1;
            margin-bottom: 20px;
            text-align: center;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }

        .client-selector, .theme-selector {
            margin-bottom: 20px;
        }

        .client-selector label, .theme-selector label {
            display: block;
            font-weight: 600;
            color: #3498db;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .client-selector select, .theme-selector select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #34495e;
            border-radius: 8px;
            background-color: #2c3e50;
            color: white;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .client-selector select:focus, .theme-selector select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .theme-list {
            list-style: none;
            margin: 0;
        }

        .theme-list li {
            margin-bottom: 8px;
        }

        .theme-list a {
            color: #bdc3c7;
            text-decoration: none;
            padding: 12px 16px;
            display: block;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 14px;
            border: 2px solid transparent;
            background-color: rgba(44, 62, 80, 0.5);
        }

        .theme-list a:hover {
            background-color: rgba(52, 152, 219, 0.2);
            color: #ecf0f1;
            border-color: #3498db;
            transform: translateX(5px);
        }

        .theme-list a.active {
            background-color: #3498db;
            color: white;
            border-color: #2980b9;
            transform: translateX(5px);
        }

        .theme-info {
            background-color: rgba(44, 62, 80, 0.8);
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            font-size: 13px;
            color: #bdc3c7;
            border-left: 4px solid #3498db;
        }

        .content-area {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .toolbar {
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .url-input-container {
            display: flex;
            align-items: center;
            gap: 15px;
            flex: 1;
            min-width: 300px;
        }

        .url-input {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            min-width: 200px;
            transition: all 0.3s ease;
        }

        .url-input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .url-label {
            font-weight: 600;
            color: #2c3e50;
            white-space: nowrap;
        }

        .current-file {
            font-weight: 600;
            color: #2c3e50;
            background-color: #e3f2fd;
            padding: 8px 16px;
            border-radius: 20px;
            border-left: 4px solid #3498db;
        }

        .controls {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.4);
        }

        .btn-success {
            background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(39, 174, 96, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%);
            color: white;
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(149, 165, 166, 0.4);
        }

        .preview-area {
            flex: 1;
            position: relative;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 30px;
            overflow-y: auto;
        }

        .widget-preview {
            background-color: white;
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            position: relative;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .widget-preview::before {
            content: "Widget Preview";
            position: absolute;
            top: -12px;
            left: 20px;
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .theme-details {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            border-left: 5px solid #3498db;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        }

        .theme-details h3 {
            margin: 0 0 10px 0;
            color: #2c3e50;
            font-size: 24px;
        }

        .theme-details p {
            margin: 0 0 20px 0;
            color: #666;
            font-size: 16px;
            line-height: 1.5;
        }

        .css-variables {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 13px;
            overflow-x: auto;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .css-variables h4 {
            margin: 0 0 15px 0;
            color: #3498db;
            font-size: 16px;
        }

        .no-theme {
            text-align: center;
            color: #666;
            padding: 60px;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .no-theme h3 {
            margin-bottom: 20px;
            color: #2c3e50;
            font-size: 28px;
        }

        .no-theme p {
            margin-bottom: 15px;
            font-size: 16px;
            line-height: 1.6;
        }

        .loading {
            text-align: center;
            color: #666;
            padding: 60px;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .loading::after {
            content: "";
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .instructions {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 25px;
            border-left: 5px solid #2196f3;
        }

        .instructions h4 {
            margin: 0 0 15px 0;
            color: #1976d2;
            font-size: 18px;
        }

        .instructions p {
            margin: 0 0 10px 0;
            color: #1565c0;
            font-size: 14px;
            line-height: 1.5;
        }

        .instructions code {
            background-color: rgba(187, 222, 251, 0.5);
            padding: 4px 8px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 13px;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 300px;
            }
            
            .toolbar {
                padding: 15px;
                flex-direction: column;
                align-items: stretch;
            }
            
            .url-input-container {
                min-width: auto;
            }
            
            .current-file {
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <h1>Theme Generator MVP</h1>
            <div class="version">Version 2.0 - Clean & Improved</div>
            
            <div class="instructions">
                <h4>🚀 How to use:</h4>
                <p>1. Run: <code>node main.js https://example.com client-name</code></p>
                <p>2. Select a client and theme below to preview</p>
                <p>3. See live previews with CSS variables</p>
            </div>
            
            <div class="theme-section">
                <div class="theme-section-title">🎨 Theme Preview</div>
                
                <div class="client-selector">
                    <label for="clientSelect">Client:</label>
                    <select id="clientSelect">
                        <option value="">Select a client...</option>
                    </select>
                </div>
                
                <div class="theme-selector">
                    <label for="themeSelect">Theme:</label>
                    <select id="themeSelect" disabled>
                        <option value="">Select a theme...</option>
                    </select>
                </div>
                
                <ul class="theme-list" id="themeList">
                    <li><a href="#" class="no-theme">Select a client first</a></li>
                </ul>
                
                <div class="theme-info" id="themeInfo" style="display: none;">
                    <strong>Theme Details:</strong><br>
                    <span id="themeDescription">No theme selected</span>
                </div>
            </div>
        </div>

        <div class="content-area">
            <div class="toolbar">
                <div class="url-input-container">
                    <label class="url-label" for="background-url">Background URL:</label>
                    <input type="url" id="background-url" class="url-input" placeholder="https://example.com" value="simple-background.html">
                    <button class="btn btn-primary" onclick="loadBackground()">Load Background</button>
                </div>
                <div class="current-file" id="current-file">Select a widget to preview</div>
                <div class="controls">
                    <button class="btn btn-success" onclick="generateNewTheme()">Generate New Theme</button>
                    <button class="btn btn-secondary" onclick="refreshPreview()">Refresh</button>
                </div>
            </div>
            
            <div class="preview-area">
                <div id="previewContent" class="no-theme">
                    <h3>Welcome to Theme Generator MVP 2.0</h3>
                    <p>This is a clean, improved version of the theme generator with better error handling and a more professional interface.</p>
                    <p>Select a client and theme from the sidebar to see a live preview of your generated themes.</p>
                    <p>Use the "Generate New Theme" button to create themes for a new website.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        class ThemePreview {
            constructor() {
                this.clients = {};
                this.currentClient = null;
                this.currentTheme = null;
                this.currentBackground = null;
                this.init();
            }
            
            async init() {
                console.log('🚀 Initializing ThemePreview 2.0...');
                await this.loadClients();
                this.setupEventListeners();
                this.renderClientSelect();
                this.loadDefaultBackground();
                console.log('✅ ThemePreview 2.0 initialized successfully');
            }
            
            async loadClients() {
                try {
                    console.log('📡 Loading clients from index.json...');
                    const response = await fetch('./output/client-themes/index.json');
                    if (response.ok) {
                        this.clients = await response.json();
                        console.log('✅ Loaded clients:', Object.keys(this.clients));
                    } else {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                } catch (error) {
                    console.log('⚠️  No client index available, using mock data');
                    this.clients = {
                        'example': {
                            name: 'Example Client',
                            themes: [
                                { id: 'brand-faithful', name: 'Brand Faithful', description: 'Matches client brand colors and fonts' },
                                { id: 'high-contrast', name: 'High Contrast', description: 'High contrast for accessibility compliance' },
                                { id: 'modern', name: 'Modern', description: 'Contemporary design with modern colors' },
                                { id: 'minimalist', name: 'Minimalist', description: 'Clean and simple design approach' }
                            ]
                        }
                    };
                }
            }
            
            setupEventListeners() {
                document.getElementById('clientSelect').addEventListener('change', (e) => {
                    this.selectClient(e.target.value);
                });
                
                document.getElementById('themeSelect').addEventListener('change', (e) => {
                    this.selectTheme(e.target.value);
                });
            }
            
            renderClientSelect() {
                const select = document.getElementById('clientSelect');
                select.innerHTML = '<option value="">Select a client...</option>';
                
                console.log('🎨 Rendering client select with clients:', Object.keys(this.clients));
                
                Object.keys(this.clients).forEach(clientId => {
                    const client = this.clients[clientId];
                    const option = document.createElement('option');
                    option.value = clientId;
                    option.textContent = client.name;
                    select.appendChild(option);
                });
                
                console.log(`✅ Client select populated with ${select.options.length} options`);
            }
            
            selectClient(clientId) {
                console.log('👤 Selecting client:', clientId);
                if (!clientId) {
                    this.clearPreview();
                    return;
                }
                
                this.currentClient = this.clients[clientId];
                console.log('✅ Current client set to:', this.currentClient);
                if (!this.currentClient) {
                    console.error('❌ Client not found:', clientId);
                    return;
                }
                
                this.renderThemeSelect();
                this.renderThemeList();
            }
            
            renderThemeSelect() {
                const select = document.getElementById('themeSelect');
                select.innerHTML = '<option value="">Select a theme...</option>';
                select.disabled = false;
                
                console.log('🎨 Rendering theme select for client:', this.currentClient.name);
                console.log('📋 Themes available:', this.currentClient.themes);
                
                this.currentClient.themes.forEach(theme => {
                    const option = document.createElement('option');
                    option.value = theme.id;
                    option.textContent = theme.name;
                    select.appendChild(option);
                });
                
                console.log(`✅ Theme select populated with ${select.options.length} options`);
            }
            
            renderThemeList() {
                const themeList = document.getElementById('themeList');
                themeList.innerHTML = '';
                
                this.currentClient.themes.forEach(theme => {
                    const li = document.createElement('li');
                    const a = document.createElement('a');
                    a.href = '#';
                    a.textContent = theme.name;
                    a.onclick = (e) => {
                        e.preventDefault();
                        this.selectThemeFromList(theme.id);
                    };
                    li.appendChild(a);
                    themeList.appendChild(li);
                });
            }
            
            selectThemeFromList(themeId) {
                // Update select dropdown
                document.getElementById('themeSelect').value = themeId;
                
                // Update active state
                document.querySelectorAll('.theme-list a').forEach(link => {
                    link.classList.remove('active');
                });
                event.target.classList.add('active');
                
                this.selectTheme(themeId);
            }
            
            async selectTheme(themeId) {
                console.log('🎨 Selecting theme:', themeId);
                if (!themeId || !this.currentClient) {
                    this.clearPreview();
                    return;
                }
                
                this.currentTheme = this.currentClient.themes.find(t => t.id === themeId);
                if (!this.currentTheme) {
                    console.error('❌ Theme not found:', themeId);
                    return;
                }
                
                console.log('✅ Current theme set to:', this.currentTheme);
                await this.loadThemePreview(themeId);
            }
            
            async loadThemePreview(themeId) {
                const previewContent = document.getElementById('previewContent');
                previewContent.innerHTML = '<div class="loading">Loading theme preview...</div>';
                
                try {
                    // Load the CSS
                    const cssPath = `./output/client-themes/${this.currentClient.name}/${themeId}.css`;
                    console.log('📡 Loading CSS from:', cssPath);
                    const cssResponse = await fetch(cssPath);
                    
                    if (!cssResponse.ok) {
                        throw new Error(`HTTP ${cssResponse.status}: ${cssResponse.statusText}`);
                    }
                    
                    const css = await cssResponse.text();
                    console.log('✅ CSS loaded successfully');
                    
                    // Create a style element
                    const styleElement = document.createElement('style');
                    styleElement.setAttribute('data-theme', themeId);
                    styleElement.textContent = css;
                    document.head.appendChild(styleElement);
                    
                    // Update current theme display
                    document.getElementById('current-file').textContent = `${this.currentClient.name} - ${this.currentTheme.name}`;
                    
                    // Render the preview
                    this.renderPreview();
                    
                } catch (error) {
                    console.error('❌ Error loading theme:', error);
                    previewContent.innerHTML = `
                        <div class="no-theme">
                            <h3>Error Loading Theme</h3>
                            <p><strong>Error:</strong> ${error.message}</p>
                            <p>Make sure the theme files exist in the output folder.</p>
                            <p>Try running: <code>node main.js https://example.com client-name</code></p>
                        </div>
                    `;
                }
            }
            
            renderPreview() {
                const previewContent = document.getElementById('previewContent');
                previewContent.innerHTML = `
                    <div class="theme-details">
                        <h3>${this.currentTheme.name}</h3>
                        <p>${this.currentTheme.description}</p>
                        <div class="css-variables">
                            <h4>CSS Variables:</h4>
                            <pre id="cssVariables">Loading CSS variables...</pre>
                        </div>
                    </div>
                    
                    <div class="widget-preview">
                        <div id="_pi_surveyWidget">
                            <div class="_pi_closeButton">×</div>
                            <div class="_pi_question">How would you rate our service?</div>
                            <ul class="_pi_answers_container">
                                <li><a href="#"><label>Excellent</label></a></li>
                                <li><a href="#"><label>Good</label></a></li>
                                <li><a href="#"><label>Average</label></a></li>
                                <li><a href="#"><label>Poor</label></a></li>
                            </ul>
                            <button class="_pi_startButton">Submit</button>
                        </div>
                    </div>
                `;
                
                // Extract and display CSS variables
                this.displayCSSVariables();
            }
            
            displayCSSVariables() {
                const styleElement = document.querySelector('style[data-theme]');
                if (styleElement) {
                    const css = styleElement.textContent;
                    const variables = css.match(/:root\s*\{([^}]+)\}/);
                    if (variables) {
                        const cssVariables = variables[1]
                            .split(';')
                            .filter(line => line.trim())
                            .map(line => line.trim() + ';')
                            .join('\n');
                        document.getElementById('cssVariables').textContent = cssVariables;
                    }
                }
            }
            
            clearPreview() {
                const previewContent = document.getElementById('previewContent');
                previewContent.innerHTML = `
                    <div class="no-theme">
                        <h3>Welcome to Theme Generator MVP 2.0</h3>
                        <p>This is a clean, improved version of the theme generator with better error handling and a more professional interface.</p>
                        <p>Select a client and theme from the sidebar to see a live preview of your generated themes.</p>
                        <p>Use the "Generate New Theme" button to create themes for a new website.</p>
                    </div>
                `;
                
                document.getElementById('current-file').textContent = 'Select a widget to preview';
                
                // Remove any loaded styles
                const existingStyles = document.querySelectorAll('style[data-theme]');
                existingStyles.forEach(style => style.remove());
            }
            
            loadDefaultBackground() {
                const url = document.getElementById('background-url').value;
                if (url) {
                    this.currentBackground = url;
                    console.log('🌐 Default background set to:', url);
                }
            }
        }
        
        // Global functions for toolbar buttons
        function loadBackground() {
            const url = document.getElementById('background-url').value.trim();
            if (!url) {
                alert('Please enter a valid URL');
                return;
            }
            
            // Handle local files vs external URLs
            let backgroundUrl = url;
            if (!url.startsWith('http://') && !url.startsWith('https://') && !url.startsWith('file://')) {
                // If it's a local file (ends with .html), use it as-is
                if (url.endsWith('.html')) {
                    backgroundUrl = url;
                } else {
                    // For other cases, assume it's an external URL and add https://
                    backgroundUrl = 'https://' + url;
                }
            }
            
            themePreview.currentBackground = backgroundUrl;
            console.log('🌐 Background URL set to:', backgroundUrl);
        }
        
        function generateNewTheme() {
            const url = document.getElementById('background-url').value.trim();
            if (!url) {
                alert('Please enter a website URL first');
                return;
            }
            
            const clientName = prompt('Enter client name:');
            if (!clientName) return;
            
            // This would typically trigger the theme generation
            alert(`To generate themes, run: node main.js ${url} ${clientName}`);
        }
        
        function refreshPreview() {
            if (themePreview.currentTheme) {
                console.log('🔄 Refreshing preview...');
                themePreview.loadThemePreview(themePreview.currentTheme.id);
            }
        }
        
        // Initialize the preview when the page loads
        let themePreview;
        document.addEventListener('DOMContentLoaded', () => {
            themePreview = new ThemePreview();
        });
    </script>
</body>
</html>