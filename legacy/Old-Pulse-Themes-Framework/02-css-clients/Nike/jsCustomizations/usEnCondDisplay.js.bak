var conditionalConfig = [
    {
      'id': 9349,
      'answers': {
        26661 : [9350 /*stars*/, 9354 /*free text*/,9355 ,9359], //website
        26662 : [9350 /*stars*/, 9352/*which app*/ ,9354 /*free text*/], //apps
        26663 : [9350 /*stars*/, 9354 /*free text*/, 9356 /*store goal*/,9359 /*how easy*/], //retail
        26664 : [9350 /*stars*/, 9353 /*product type*/, 9354 /*free text*/], //products
        26665 : [9350 /*stars*/, 9354 /*free text*/, 9357/*support*/], //customer service
        26666 : [9351 /*aspect of nike*/, 9354 /*free text*/,], //nike
        26667 : [9354 /*free text*/] //other
      }
    },
    {
      'id': 9352,
      'answers': {
        26680 : [9358 /*primary app goal*/, 9359 /*how easy*/]
      }
    }
];

Array.prototype.unique = function() {
    var a = this.concat();
    for(var i=0; i<a.length; ++i) {
        for(var j=i+1; j<a.length; ++j) {
            if(a[i] === a[j])
                a.splice(j--, 1);
        }
    }

    return a;
  };

  Array.prototype.contains = function(obj) {
      var i = this.length;
      while (i--) {
          if (this[i] === obj) {
              return true;
          }
      }
      return false;
  }

  function Question(args){
    this.id = args.id;
    this.answers = args.answers;
    this.question = this.getPulseQuestion(this.id);
    this.dependents = this.getDependents();
    this.dependentQuestions = this.getSubUnits();
    this.subUnits = this.getSubUnits();
    this.currentAnswer = 0;
    this.attachEvents();
  }
  Question.prototype.getSubUnits = function(){
    var getPreviousSibling = function (elem, className) {

      // Get the next sibling element
      var sibling = elem.previousElementSibling;

      // If there's no className, return the first sibling
      if (!className) return sibling;

      // If the sibling matches our className, use it
      // If not, jump to the next sibling and continue the loop
      while (sibling) {
        if (sibling.classList.contains(className)) return sibling;
        sibling = sibling.previousElementSibling;
      }

    };
    var getNextSibling = function (elem, className) {

      // Get the next sibling element
      var sibling = elem.nextElementSibling;

      // If the sibling matches our className, use it
      // If not, jump to the next sibling and continue the loop
      while (sibling) {
        if (sibling.classList.contains(className)) return sibling;
        sibling = sibling.nextElementSibling;
      }

    };
    dependentQuestions = {};
    for (var i = 0; i < this.dependents.length; i++) {
      //get question el
      dependentQuestions[this.dependents[i]] = this.getPulseQuestion(this.dependents[i]);
      baseEl = PulseInsightsObject.survey.widgetContainer.querySelector('._pi_answers_container[data-question-id="'+ dependentQuestions[this.dependents[i]].id +'"]');

      // if(optional == "f"){
        //need to handle optional stuff
      // }
      dependentQuestions[this.dependents[i]].baseEl = baseEl;
      dependentQuestions[this.dependents[i]].questionEl = getPreviousSibling(baseEl, '_pi_question');
      if((dependentQuestions[this.dependents[i]].after_answers_count != "0" && dependentQuestions[this.dependents[i]].after_answers_count != "") && (dependentQuestions[this.dependents[i]].after_answers_items != null && dependentQuestions[this.dependents[i]].after_answers_items != '["", ""]') && dependentQuestions[this.dependents[i]].button_type === 1 && dependentQuestions[this.dependents[i]].question_type == "single_choice_question"){
        // get after answer el
        dependentQuestions[this.dependents[i]].afterAnswersEl = getNextSibling(baseEl, '_pi_scale_container_after');
      }
      else{
        dependentQuestions[this.dependents[i]].afterAnswersEl = null;
      }
      if(dependentQuestions[this.dependents[i]].before_answers_count != "0" && dependentQuestions[this.dependents[i]].before_answers_items != null & dependentQuestions[this.dependents[i]].button_type === 1 && dependentQuestions[this.dependents[i]].question_type == "single_choice_question"){
        // get before answer el
        dependentQuestions[this.dependents[i]].beforeAnswersEl = getPreviousSibling(baseEl, '_pi_scale_container_before');
      }
      else{
        dependentQuestions[this.dependents[i]].beforeAnswersEl = null;
      }
      if((dependentQuestions[this.dependents[i]].before_answers_count != "0" && dependentQuestions[this.dependents[i]].before_answers_count != "") && (dependentQuestions[this.dependents[i]].before_answers_items != null && dependentQuestions[this.dependents[i]].before_answers_items != '["", ""]') && dependentQuestions[this.dependents[i]].button_type === 1 && dependentQuestions[this.dependents[i]].question_type == "single_choice_question" ){
        // get before question el
        dependentQuestions[this.dependents[i]].beforeQuestionEl = getPreviousSibling(baseEl, 'pi_header_before');
      }
      else{
        dependentQuestions[this.dependents[i]].beforeQuestionEl = null;
      }
      if(dependentQuestions[this.dependents[i]].after_question_text != "" && dependentQuestions[this.dependents[i]].after_question_text !== null && dependentQuestions[this.dependents[i]].button_type === 1 && dependentQuestions[this.dependents[i]].question_type == "single_choice_question" ){
        // get after question el
        dependentQuestions[this.dependents[i]].afterQuestionEl = getPreviousSibling(baseEl, 'pi_header_after');
      }
      else{
        dependentQuestions[this.dependents[i]].afterQuestionEl = null;
      }
      // id: 8961
    }
    return dependentQuestions;
  }
  Question.prototype.attachEvents = function(){
    // single choice
    if(this.question.question_type == "single_choice_question"){
      // normal single choice

      if(this.question.button_type === 0 || this.question.button_type === 1){
        var els = PulseInsightsObject.survey.widget.querySelectorAll('._pi_answers_container[data-question-id="'+ this.question.id +'"] li a');
        var el;
        var self = this;
        for (var i = 0; i < els.length; i++) {
          // el = PulseInsightsObject.survey.widget.querySelector('[data-answer-id="' + this.answers[i].id + '"]');
          var elId = els[i].getAttribute('data-answer-id');


            // console.log('hello');
            // console.log(els[i]);

            el = els[i];
            el.addEventListener('click', function(){
              self.currentAnswer =  parseInt(this.getAttribute('data-answer-id'));
              if(typeof self.answers[self.currentAnswer] != 'undefined'){
                self.showQuestions();
              }
              else{
                self.hideQuestions(true);
              }

            });
          }

      }
      // select input
      else if(this.question.button_type === 2){
        var el = PulseInsightsObject.survey.widget.querySelector('._pi_answers_container[data-question-id="'+ this.question.id +'"] select._pi_select');

        el.addEventListener('change', function(e){
          if(typeof this.answers[el.value] != 'undefined'){
            this.currentAnswer =  parseInt(el.value);
            this.showQuestions();
          }
          else{
            this.hideQuestions(true);
          }
        }.bind(this));
      }
    }
    // multiple choice
    else if(this.question.question_type == "multiple_choices_question"){
      var parentEl = PulseInsightsObject.survey.widget.querySelector('._pi_answers_container[data-question-id="'+ this.question.id +'"]'),
          els = parentEl.querySelectorAll('li label'),
          keys;
      for (var i = 0; i < els.length; i++) {
        els[i].addEventListener('click', function(e){
          keys = Object.keys(this.answers);
          for (var j = 0; j < keys.length; j++) {
            if(parentEl.getAttribute('data-answer').indexOf(keys[j]) !== -1){
              this.currentAnswer =  parseInt(keys[j]);
              this.showQuestions();
            }
            else{
              this.hideQuestions(true);
            }
          }
        }).bind(this);
      }
    }
  }
  Question.prototype.getPulseQuestion = function(id){
    for (var i = 0; i < PulseInsightsObject.survey.questions.length; i++) {
      if(PulseInsightsObject.survey.questions[i].id === id){
        return PulseInsightsObject.survey.questions[i];
      }
    }
  }
  Question.prototype.getDependents = function(){
    var dependents = [],
        keys = Object.keys(this.answers);
    for (var i = 0; i < keys.length; i++) {
      dependents = dependents.concat(this.answers[keys[i]]).unique();
    }
    return dependents;
  }
  Question.prototype.showQuestions = function(){
    //check and see if its already shown
    // console.log('show');
    // console.log(dependents);
    var dependents = this.answers[this.currentAnswer];
    this.hideQuestions(true);
    if(typeof dependents !== 'undefined'){
      for (var i = 0; i < dependents.length; i++) {
        this.subUnits[dependents[i]].questionEl.style.setProperty("display", "flex", "important");
        this.subUnits[dependents[i]].baseEl.style.setProperty("display", "flex", "important");

        if(this.subUnits[dependents[i]].optional == "f" && this.subUnits[dependents[i]].question_type != "custom_content_question"){
          this.subUnits[dependents[i]].baseEl.setAttribute("data-question-optional", "f");
        }

        if(this.subUnits[dependents[i]].afterAnswersEl != null){
          this.subUnits[dependents[i]].afterAnswersEl.style.setProperty("display", "flex", "important")
        }
        if(this.subUnits[dependents[i]].beforeAnswersEl != null){
          this.subUnits[dependents[i]].beforeAnswersEl.style.setProperty("display", "flex", "important");
        }
        if(this.subUnits[dependents[i]].beforeQuestionEl != null){
          this.subUnits[dependents[i]].beforeQuestionEl.style.setProperty("display", "block", "important");
        }
        if(this.subUnits[dependents[i]].afterQuestionEl != null) {
          this.subUnits[dependents[i]].afterQuestionEl.style.setProperty("display", "block", "important");
        }
        if(typeof PulseInsightsObject.survey.checkSubmissionCompleteness !== "undefined"){
          PulseInsightsObject.survey.checkSubmissionCompleteness(this.subUnits[dependents[i]].baseEl);
        }
      }
      // todo only do this if the dependent answer is selected
      // for (var i = 0; i < window.qList.length; i++) {
      //   if(this.dependents.contains(window.qList[i].id)){
      //     console.log('i am here');
      //     window.qList[i].showQuestions();
      //   }
      // }
    }

  }
  Question.prototype.hideQuestions = function(checkCompleteness = true){
    // console.log('hide');
    // console.log(this);
    // console.log(this.dependents);
    var keys = Object.keys(this.answers);
    for (var i = 0; i < keys.length; i++) {
      // console.log('keys');
      // console.log(keys);
      for (var j = 0; j < this.answers[keys[i]].length; j++) {
        // console.log('this.answers[keys[i]]');
        // console.log();
        // console.log(this.subUnits[this.answers[keys[i]][j]]);
        this.subUnits[this.answers[keys[i]][j]].questionEl.style.setProperty("display", "none", "important");
        this.subUnits[this.answers[keys[i]][j]].baseEl.style.setProperty("display", "none", "important");
        this.subUnits[this.answers[keys[i]][j]].baseEl.setAttribute("data-question-optional", "t");
        if(checkCompleteness && typeof PulseInsightsObject.survey.checkSubmissionCompleteness !== "undefined"){
          PulseInsightsObject.survey.checkSubmissionCompleteness(this.subUnits[this.answers[keys[i]][j]].baseEl);
        }
        if(this.subUnits[this.answers[keys[i]][j]].afterAnswersEl != null){
          this.subUnits[this.answers[keys[i]][j]].afterAnswersEl.style.setProperty("display", "none", "important");
        }
        if(this.subUnits[this.answers[keys[i]][j]].beforeAnswersEl != null){
          this.subUnits[this.answers[keys[i]][j]].beforeAnswersEl.style.setProperty("display", "none", "important");
        }
        if(this.subUnits[this.answers[keys[i]][j]].beforeQuestionEl != null){
          this.subUnits[this.answers[keys[i]][j]].beforeQuestionEl.style.setProperty("display", "none", "important");
        }
        if(this.subUnits[this.answers[keys[i]][j]].afterQuestionEl != null) {
          // console.log('hi');
          // console.log(this.subUnits[this.answers[keys[i]][j]].afterQuestionEl);
          this.subUnits[this.answers[keys[i]][j]].afterQuestionEl.style.setProperty("display", "none", "important");
        }
      }
    }
    //check and see if its already hidden

    //determine if there are subelements and hide them




  }
  window.qList = [];
  for (var i = 0; i < conditionalConfig.length; i++) {
    window.qList[i] = new Question(conditionalConfig[i]);
    window.qList[i].hideQuestions(false);
  }


var textInputs = document.querySelectorAll("._pi_free_text_question_field"),
    charCountEl,
    maxChars;
for (var i = 0; i < textInputs.length; i++) {
  el = textInputs[i];
  charCountEl = el.parentElement.querySelector("._pi_free_text_question_characters_count");
  maxChars = charCountEl.getAttribute('data-max-length');
  el.setAttribute('maxLength', maxChars);
  // charCountEl.style.setProperty('display', 'none');
  // var newCharCountEl = document.createElement('div');
  // newCharCountEl.setAttribute('class', '_pi_free_text_question_characters_count');
  // el.parentNode.appendChild(newCharCountEl);
  // el.addEventListener('keyup', function(e){updateCharCount(maxChars, el.value.length, newCharCountEl)});
  // el.addEventListener('keypress', function(e){updateCharCount(maxChars, el.value.length, newCharCountEl)});
}

// var localizeErrorMessage = function(string){
//   setTimeout(function(){
//     var submitEl = PulseInsightsObject.survey.widgetContainer.querySelector('input._pi_all_questions_submit_button[type="submit"]'),
//         errorEl = PulseInsightsObject.survey.widgetContainer.querySelector('._pi_all_questions_error');
//
//     submitEl.addEventListener('click', function(){
//       setTimeout(function(){
//         if(true){
//           errorEl.innerHTML = string;
//           errorEl.style.setProperty("display", "block", "important");
//         }
//       }, 200);
//     });
//   },200);
// }
//
//
// localizeErrorMessage("Please fill in all required answers");

// var piInputs = document.querySelectorAll('._pi_free_text_question_field');
// for (var i = 0; i < piInputs.length; i++) {
//   piInputs[i].addEventListener('keypress', function() {
//     this.parentNode.parentNode.setAttribute('data-answer', this.value);
//   });
//   piInputs[i].addEventListener('keyup', function() {
//     this.parentNode.parentNode.setAttribute('data-answer', this.value);
//   });
// }
//
// var updateCharCount = function(max, current, displayEl){
//   displayEl.innerHTML = current + '/' + max;
// };
// var textInputs = document.querySelectorAll("._pi_free_text_question_field"),
//     charCountEl,
//     maxChars;
// for (var i = 0; i < textInputs.length; i++) {
//   el = textInputs[i];
//   charCountEl = el.parentElement.querySelector("._pi_free_text_question_characters_count");
//   maxChars = charCountEl.getAttribute('data-max-length');
//   el.setAttribute('maxLength', maxChars);
//   charCountEl.style.setProperty('display', 'none');
//   var newCharCountEl = document.createElement('div');
//   newCharCountEl.setAttribute('class', '_pi_free_text_question_characters_count');
//   el.parentNode.appendChild(newCharCountEl);
//   el.addEventListener('keyup', function(e){updateCharCount(maxChars, el.value.length, newCharCountEl)});
//   el.addEventListener('keypress', function(e){updateCharCount(maxChars, el.value.length, newCharCountEl)});
// }
