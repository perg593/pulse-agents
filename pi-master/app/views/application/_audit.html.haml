:ruby
  audit ||= nil
  filter_fields ||= nil

  audited_changes = audit.audited_changes
  audited_changes = audited_changes.slice(*filter_fields) if filter_fields

- if audited_changes.present?
  %h4= "On #{ audit.created_at.strftime("%B/%d/%Y at %H:%M(%z)") } #{ print_username(audit) }"

  - case audit.action
    - when "create"
      %h5= "Created new #{ audit.auditable_type } with values:"
      %ul
        - audited_changes.each do |attribute, value|
          :ruby
            if (enum = get_enum(audit, attribute))
              value = enum[value]
            end

            association_name = get_association_name(attribute, value)

          - if association_name
            %li= "#{ get_association_class_name(attribute) } = #{ association_name } (id: #{ value })"
          - else
            %li= "#{ attribute } = #{ value.presence || "null" }"

    - when "destroy"
      - if current_user.admin?
        %h5 Destroyed #{ audit.auditable_type }(#{ audit.auditable_id }): <i>#{ audit.audited_changes["name"] || "name not available"}</i>
      - else
        %h5 Destroyed #{ audit.auditable_type }: <i>#{ audit.audited_changes["name"] || "name not available"}</i>

    - when "update"
      - if current_user.admin?
        %h5 Updated #{ audit.auditable_type }(#{ audit.auditable_id }) with values:
      - else
        %h5 Updated #{ audit.auditable_type } #{ audit.auditable&.name }
      %ul
        - audited_changes.each do |attribute, values|
          :ruby
            if (enum = get_enum(audit, attribute))
              values.map! { |val| enum[val] }
            end

          %li Changed #{ attribute } from <i>#{ values.first.presence || "null" }</i> to <i>#{ values.last.presence || "null" }</i>
