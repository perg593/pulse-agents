.automations
  = simple_form_for @automation, html: { role: 'form', class: 'form-horizontal', id: 'automation-form' } do |form|
    .panel.panel-default
      .panel-heading
        %h4.panel-title Name
      .panel-body
        = form.input :name, label: 'Automation Name', required: false
        = form.input :enabled, label: 'Status', as: :select, collection: [['On', true], ['Off', false]], include_blank: false

    .panel.panel-default
      .panel-heading
        %h4.panel-title Conditions
      .panel-body
        .trigger-type
          = form.input :trigger_type, collection: trigger_type_input_pairs, include_blank: false, disabled: '', required: false
        .condition-type
          = form.input :condition_type, collection: condition_type_input_pairs, include_blank: false, disabled: '', required: false
        .form-group
          .url{ class: ('hide' if form.object.answer_text?) }
            = form.simple_fields_for :conditions, @url_condition do |condition_fields|
              %label
              %label If User Visits URL
              .url-matcher-input
                = condition_fields.input_field :url_matcher, collection: url_matcher_input_pairs, include_blank: false
              .condition-input
                = condition_fields.input_field :condition
        .form-group
          .answer_text{ class: ('hide' if form.object.url?) }
            %label
            .controls.automation-conditions
              = form.simple_fields_for :conditions, @answer_text_conditions do |condition_fields|
                .automation-conditions-input
                  .question-input
                    Response text of
                    = condition_fields.input_field :question_id, collection: question_input_pairs(@questions), include_blank: false
                    contains
                  .condition-input
                    = condition_fields.input_field :condition
                    = condition_fields.check_box :_destroy, class: 'hide'
                    = link_to '×', 'javascript: void(0);', class: 'close', data: { persisted: condition_fields.object.persisted? }

              = form.simple_fields_for :conditions, @automation.conditions.new do |condition_fields|
                .hidden-condition-layout.hide.automation-conditions-input
                  .question-input
                    Response text of
                    = condition_fields.input_field :question_id, collection: question_input_pairs(@questions), include_blank: false
                    contains
                  .condition-input
                    = condition_fields.input_field :condition
                    = condition_fields.check_box :_destroy, class: 'hide'
                    = link_to '×', 'javascript: void(0);', class: 'close', data: { persisted: condition_fields.object.persisted? }

              = link_to 'Add Another', 'javascript: void(0);', class: 'btn btn-xs btn-default add_another_btn'

      *Note: only live surveys are displayed.

    .panel.panel-default
      .panel-heading
        %h4.panel-title Actions
      .panel-body
        .action-type
          = form.input :action_type, collection: action_type_input_pairs, include_blank: false, disabled: '', required: false
        .event{ class: ('hide' if form.object.send_email?) }
          = form.simple_fields_for :actions, @event_action do |action_fields|
            = action_fields.input :event_name, placeholder: 'e.g., Conversion'
            = action_fields.input :event_properties, placeholder: 'e.g., {"Product":"Gold"}'
        .email{ class: ('hide' if form.object.create_event?) }
          %label.action-type-label Emails
          .email-inputs
            = form.simple_fields_for :actions, @emails do |email_fields|
              = email_fields.input :email, as: :check_boxes, collection: [[email_fields.object.email, email_fields.object.email]], label: false,
              input_html: { checked: @automation.actions.pluck(:email).include?(email_fields.object.email) }
    .form-action
      = form.submit 'Save', class: 'btn btn-default'

- if current_user.admin? && @audits.present?
  = render "application/audits", audits: @audits
