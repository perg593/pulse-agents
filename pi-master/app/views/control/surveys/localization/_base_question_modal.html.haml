:ruby
  modal_id ||= nil
  question_locale_group ||= nil

  base_survey = question_locale_group.survey_locale_group.base_survey
  base_question = question_locale_group.questions.find_by(id: base_survey.questions.pluck(:id))

.modal.fade{id: modal_id, :role => "dialog", :tabindex => "-1"}
  .modal-dialog.edit-question{:role => "document"}
    .modal-content
      = form_for [:control, question_locale_group], url: question_locale_group_path(question_locale_group), html: {method: "patch"} do |question_locale_group_form|
        .modal-header
          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
            %span{"aria-hidden" => "true"} Ã—
          %h5.modal-title Edit Question
        .modal-body
          = question_locale_group_form.fields_for "questions", base_question do |base_question_form|
            .basic-fields-row
              %label Base Value:
              %span= base_question.content

          .basic-fields-row
            %label Short Name:
            = question_locale_group_form.text_field :name, required: true

          - if base_question.question_type == "free_text_question"
            .basic-fields-row
              %label Next Question:
              - initial_selection = Question.find_by(id: base_question.free_text_next_question_id)&.question_locale_group_id
              - next_question_options = base_survey.questions.map(&:question_locale_group).reject{ |candidate_question_locale_group| candidate_question_locale_group == question_locale_group }.compact.map {|question_locale_group| [question_locale_group.name, question_locale_group.id]}
              = select_tag :next_question_locale_group_id, options_for_select(next_question_options, initial_selection), include_blank: true

          = question_locale_group_form.fields_for "questions", base_question do |base_question_form|
            - if base_question.question_type == "single_choice_question" && !base_question.nps?
              .question_fields_container.single_choice_question
                .basic-fields-container
                  .basic-fields-row
                    %label Randomize:
                    = base_question_form.select :randomize, options_for_select(question_randomization_options)

                = simple_form_for base_survey, authenticity_token: false do |f|
                  = f.fields_for :form_questions, base_question do |questions_fields|
                    .surveys-controller
                      .survey-formatting
                        .survey-fields-wrapper
                          .follow_question-field.sub-fields
                            = render "control/surveys/localization/edit_single_choice_question_options", survey: base_survey, questions_fields: questions_fields

            - elsif base_question.question_type == "multiple_choices_question"
              .question_fields_container.multiple_choices_question
                .basic-fields-container
                  .basic-fields-row.left-aligned
                    %label Enable Maximum Selection Limit:
                    = base_question_form.check_box :enable_maximum_selection
                  .basic-fields-row
                    %label Maximum selections:
                    = base_question_form.text_field :maximum_selection, type: :number, min: 0

            - elsif base_question.question_type == "custom_content_question"
              .question_fields_container.custom_content_question
                = simple_form_for base_survey, authenticity_token: false do |f|
                  = f.fields_for :form_questions, base_question do |questions_fields|
                    .surveys-controller
                      .survey-formatting
                        .survey-fields-wrapper
                          .sub-fields
                            = render "control/surveys/localization/edit_custom_content_question_options", survey: base_survey, questions_fields: questions_fields

            - elsif base_question.single_choice_question? && base_question.nps?
              .question_fields_container.nps_question
                = simple_form_for base_survey, authenticity_token: false do |f|
                  = f.fields_for :form_questions, base_question do |questions_fields|
                    .surveys-controller
                      .survey-formatting
                        .survey-fields-wrapper
                          .sub-fields
                            = render "control/surveys/localization/edit_nps_question_options", questions_fields: questions_fields

          -# For reasons unknown, this modal-footer will not render inside the form when it's specified after modal-body.
          -# This problem only appears after adding "= simple_form_for base_survey do |f|" above
          -# If the modal-footer is rendered outside the form, it loses its event handler and its form submission abilities
          .modal-footer
            = link_to "Destroy", question_locale_group_path(question_locale_group), method: :delete, class: "btn btn-danger", data: { confirm: "This will delete this question across all surveys in group. Proceed?" }
            %button.btn.btn-secondary{"data-dismiss" => "modal", :type => "button"} Close
            = question_locale_group_form.submit 'Save', class: 'btn btn-primary'
